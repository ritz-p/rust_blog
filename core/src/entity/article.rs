//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "article")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    #[sea_orm(unique)]
    pub slug: String,
    pub excerpt: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::article_category::Entity")]
    ArticleCategory,
    #[sea_orm(has_many = "super::article_tag::Entity")]
    ArticleTag,
}

impl Related<super::article_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArticleCategory.def()
    }
}

impl Related<super::article_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArticleTag.def()
    }
}

impl Related<super::category::Entity> for Entity {
    fn to() -> RelationDef {
        super::article_category::Relation::Category.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::article_category::Relation::Article.def().rev())
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        super::article_tag::Relation::Tag.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::article_tag::Relation::Article.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
